# Generated by Django 5.0.1 on 2024-02-12 14:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_patient', models.BooleanField(default=False)),
                ('is_medecin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nbr_RDV', models.IntegerField(blank=True, null=True)),
                ('duree_RDV', models.DurationField(blank=True, null=True)),
                ('nbr_semaine', models.IntegerField(blank=True, null=True)),
                ('modif_RDV', models.IntegerField(blank=True, null=True)),
                ('date_limite', models.DateField(blank=True, null=True)),
                ('lundi', models.JSONField(default={'jeudi': [7, 12, 19], 'lundi': [7, 12, 19], 'mardi': [7, 12, 19], 'mercredi': [7, 12, 19], 'samedi': [7, 12, 19], 'vendredi': [7, 12, 19]})),
            ],
        ),
        migrations.CreateModel(
            name='Medecin',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('tel_medecin', models.CharField(blank=True, max_length=15, null=True)),
                ('profession', models.CharField(blank=True, max_length=255, null=True)),
                ('couleur_medecin', models.CharField(blank=True, max_length=20, null=True)),
                ('address_of_office', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('tel_patient', models.CharField(blank=True, max_length=15, null=True)),
                ('adresse_patient', models.TextField(blank=True, null=True)),
                ('numero_secu', models.TextField(blank=True, null=True)),
                ('couleur_patient', models.CharField(blank=True, max_length=20, null=True)),
                ('sexe', models.CharField(choices=[('M', 'Masculin'), ('F', 'FÃ©minin'), ('O', 'Autre')], max_length=1)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agenda.medecin')),
            ],
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('heure_debut', models.TimeField(blank=True, null=True)),
                ('duree', models.DurationField(blank=True, null=True)),
                ('bloque', models.BooleanField(default=False)),
                ('medecin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='agenda.medecin')),
                ('patient', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='agenda.patient')),
            ],
        ),
    ]
